name: Test

on:
  workflow_dispatch:
  push:
    paths-ignore:
      - '.github/FUNDING.YML'
      - '.github/dependabot.yml'
      - '.github/*.md'
      - '**/*.md'
      - '.gitconfig'
      - '.gitignore'
      - '.npmignore'
      - '*LICENSE*.*'
      - 'LICENSE'
      - '.idea/**'
      - '.vscode/**'
      - 'README.md'
      - 'appveyor.yml'
      - 'how_to_build.txt'

jobs:
  test:
    runs-on: ${{ matrix.os }}
    name: test-${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
          os: [ ubuntu-22.04, windows-2022 ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup dotnet
        uses: actions/setup-dotnet@v4
        with:
            dotnet-version: '8.0.x'

      - if: runner.os == 'Linux'
        name: "Install Mono"
        run: |
            sudo apt install ca-certificates gnupg
            sudo gpg --homedir /tmp --no-default-keyring --keyring /usr/share/keyrings/mono-official-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF
            echo "deb [signed-by=/usr/share/keyrings/mono-official-archive-keyring.gpg] https://download.mono-project.com/repo/ubuntu stable-focal main" | sudo tee /etc/apt/sources.list.d/mono-official-stable.list
            sudo apt update
            sudo apt install mono-devel

      - if: runner.os == 'Windows'
        name: "Cake Windows"
        shell: pwsh
        run: .\build.ps1

      - if: runner.os == 'Linux'
        name: "Cake Linux"
        shell: bash
        run: ./build.sh

      - name: Upload nuget packages
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: nuget-packages-${{ matrix.os }}
          path: build/nuget/*.nupkg

      - name: Upload test summary
        if: always()
        uses: actions/upload-artifact@v4
        with:
            name: test-summary
            path: test/*.Tests/TestResults/TestResults*.xml

  publish-test-summary:
    name: "publish test-summary"
    needs: test
    runs-on: ubuntu-latest
    permissions:
      checks: write
      pull-requests: write

    if: always()

    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: publish test-summary
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          check_run_annotations: 'none'
          check_name: 'test-summary'
          files: "artifacts/**/*.xml"
